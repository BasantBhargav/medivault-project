Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

ngrok http 3000

http://localhost:3000/admindashboard.html


const express = require('express');
const path = require('path');
const app = express();
const port = 3000;


app.get('/', (req, res) => {
    res.send("Hello world...");
});


app.get('/home', (req, res) => {
    res.sendFile(path.join(__dirname, 'front/home.html'));
});

app.get('/login', (req, res) => {
    res.sendFile(path.join(__dirname, 'front/login.html'));
});


app.get('/signup', (req, res) => {
  res.sendFile(path.join(__dirname, 'front/signup.html'));
});

app.get('/dashboard', (req, res) => {
    res.sendFile(path.join(__dirname, 'front/dashboard.html'));
});

app.get('/doctordashboard', (req, res) => {
    res.sendFile(path.join(__dirname, 'front/doctordashboard.html'));
});

app.get('/patientdashboard',  (req, res) => {
  res.sendFile(path.join(__dirname, 'front/patientdashboard.html'));
});


app.get('/hospitaldashboard',  (req, res) => {
  res.sendFile(path.join(__dirname, 'front/hospitaldashboard.html'));
});


app.get('/logout', (req, res) => {
    res.redirect('/home');
});


app.listen(port, () => {
    console.log(`Example app listening at http://localhost:${port}`);
});




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Patient Dashboard | MediVault</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <script src="https://kit.fontawesome.com/2f9bc2e5d9.js" crossorigin="anonymous"></script>
  <style>
    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      background:linear-gradient(to right top, #f0f4ff, #e2ecff, #d2e4ff);
      color: #1f2937;
      min-height: 100vh;
    }

    .container {
      max-width: 960px;
      margin: 0 auto;
      padding: 40px 20px;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }

    .header h1 {
      font-size: 2rem;
      color: #4a6cf7;
      font-weight: 700;
    }

    .date-display {
      font-size: 1rem;
      color: #6b7280;
      margin-bottom: 20px;
      text-align: right;
    }

    .logout-btn {
      padding: 10px 16px;
      background: #ef4444;
      color: #fff;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 600;
    }

    .logout-btn:hover {
      background: #dc2626;
    }

    .card {
      background: rgba(255, 255, 255, 0.95);
      padding: 24px;
      border-radius: 12px;
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
      margin-bottom: 30px;
      backdrop-filter: blur(4px);
    }

    .card .title {
      font-size: 1.1rem;
      color: #4a6cf7;
      font-weight: 600;
      margin-bottom: 12px;
    }

    .card .value {
      font-size: 2rem;
      font-weight: bold;
      color: #10b981;
    }

    .user-info p {
      margin: 6px 0;
      font-size: 0.95rem;
      color: #4b5563;
    }

    .activity-list {
      margin-top: 20px;
    }

    .activity-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 14px 0;
      border-bottom: 1px solid #e5e7eb;
      flex-wrap: wrap;
    }

    .activity-icon {
      margin-right: 16px;
      font-size: 1.2rem;
      color: #4a6cf7;
    }

    .activity-content {
      flex-grow: 1;
    }

    .activity-title {
      font-weight: 600;
      margin-bottom: 4px;
    }

    .activity-time {
      color: #6b7280;
      font-size: 0.85rem;
    }

    .activity-action a,
    .activity-action button {
      display: inline-flex;
      align-items: center;
      padding: 8px 14px;
      margin-left: 8px;
      border: none;
      border-radius: 50px;
      font-size: 0.9rem;
      font-weight: 600;
      text-decoration: none;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08);
    }

    .activity-action a.view-btn {
      background-color: #4a6cf7;
      color: #fff;
    }

    .activity-action a.download-btn {
      background-color: #10b981;
      color: #fff;
    }

    .activity-action button.delete-btn {
      background-color: #ef4444;
      color: #fff;
    }

    .activity-action a.view-btn:hover {
      background-color: #3b5ce6;
    }

    .activity-action a.download-btn:hover {
      background-color: #059669;
    }

    .activity-action button.delete-btn:hover {
      background-color: #dc2626;
    }

    .filter-bar {
      margin-top: 10px;
      margin-bottom: 20px;
      display: flex;
      justify-content: flex-end;
    }

    select,
    input[list] {
      padding: 10px 12px;
      border-radius: 8px;
      border: 1px solid #ccc;
      font-size: 0.95rem;
      min-width: 180px;
      outline: none;
      background: #fff;
    }

    .upload-form {
      margin-top: 20px;
    }

    .upload-form input, .upload-form button {
      display: block;
      width: 100%;
      margin-bottom: 10px;
      padding: 10px;
      border-radius: 8px;
      border: 1px solid #ccc;
      font-size: 0.95rem;
    }

    .upload-form button {
      background: #4a6cf7;
      color: #fff;
      font-weight: 600;
      cursor: pointer;
      border: none;
    }

    .upload-form button:hover {
      background: #3b5ce6;
    }
  </style>
</head>
<body>

  <div class="container">
    <div class="header">
      <h1>Welcome, <span id="userName">Patient</span></h1>
      <button class="logout-btn" onclick="logout()">Logout</button>
    </div>

    <div class="date-display" id="currentDate">
      <i class="far fa-calendar-alt"></i> Loading date...
    </div>

    <div class="card user-info">
      <div class="title">Your Details</div>
      <p><strong>ID:</strong> <span id="userId">-</span></p>
      <p><strong>Name:</strong> <span id="userNameCard">-</span></p>
      <p><strong>Email:</strong> <span id="userEmail">-</span></p>
      <p><strong>Phone:</strong> <span id="userPhone">-</span></p>
      <p><strong>Role:</strong> <span id="userRole">-</span></p>
    </div>

    <div class="card">
      <div class="title">Upload a Report</div>
      <form class="upload-form" id="uploadForm" enctype="multipart/form-data">
        <input list="reportTypes" name="reportType" placeholder="Select or type report type" required />
        <datalist id="reportTypes">
          <option value="Blood Test">
          <option value="Urine Test">
          <option value="MRI">
          <option value="CT Scan">
          <option value="Ultrasound">
          <option value="ECG/EKG">
          <option value="Prescription">
          <option value="X-Ray">
          <option value="PET Scan">
          <option value="Biopsy Report">
          <option value="Allergy Test">
          <option value="COVID-19 Test">
          <option value="Vaccination Record">
          <option value="Kidney Function Test (KFT)">
          <option value="Liver Function Test (LFT)">
          <option value="Thyroid Function Test (TFT)">
          <option value="Cholesterol Profile">
          <option value="Hemoglobin A1C (HbA1c)">
          <option value="Vision Test Report">
          <option value="Dental X-Ray">
          <option value="Bone Density Test">
          <option value="Stool Test">
          <option value="Blood Sugar Test">
          <option value="Pap Smear">
          <option value="Mammogram">
          <option value="HIV Test">
          <option value="Genetic Test">
          <option value="Other">
        </datalist>
        <input type="file" name="report" required>
        <button type="submit">Upload Report</button>
      </form>
    </div>

    <div class="card">
      <div class="title">Total Reports</div>
      <div class="value" id="reportCount">0</div>
    </div>

    <div class="card">
      <div class="title">Your Uploaded Reports</div>

      <div class="filter-bar">
        <select id="filterSelect" onchange="renderReportList()">
          <option value="all">All Report Types</option>
        </select>
      </div>

      <div class="activity-list" id="reportList">
        <!-- Report items will appear here -->
      </div>
    </div>
  </div>

  <script>
    let allReports = [];

    function showCurrentDate() {
      const dateElem = document.getElementById('currentDate');
      const now = new Date();
      const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
      dateElem.innerHTML = `<i class="far fa-calendar-alt"></i> ${now.toLocaleDateString(undefined, options)}`;
    }

    async function loadDashboardData() {
      try {
        const res = await fetch('/api/patient-dashboard');
        if (res.status === 401) {
          window.location.href = '/login';
          return;
        }
        const data = await res.json();

        document.getElementById('userName').innerText = data.user.name || 'Patient';
        document.getElementById('userId').innerText = data.user._id;
        document.getElementById('userNameCard').innerText = data.user.name || 'N/A';
        document.getElementById('userEmail').innerText = data.user.email || 'N/A';
        document.getElementById('userPhone').innerText = data.user.phone || 'N/A';
        document.getElementById('userRole').innerText = data.user.role;

        allReports = data.reports;
        document.getElementById('reportCount').innerText = allReports.length;

        populateFilterOptions(allReports);
        renderReportList();
      } catch (err) {
        console.error('Error loading dashboard:', err);
        document.getElementById('reportList').innerHTML = '<p>Error loading reports.</p>';
      }
    }

    function populateFilterOptions(reports) {
      const filterSelect = document.getElementById('filterSelect');
      filterSelect.innerHTML = `<option value="all">All Report Types</option>`;
      const types = [...new Set(reports.map(r => r.reportType))];
      types.forEach(type => {
        const option = document.createElement('option');
        option.value = type;
        option.textContent = type;
        filterSelect.appendChild(option);
      });
    }

    function renderReportList() {
      const reportList = document.getElementById('reportList');
      const filterValue = document.getElementById('filterSelect').value;

      let filtered = [...allReports];
      if (filterValue !== 'all') {
        filtered = filtered.filter(r => r.reportType === filterValue);
      }

      if (!filtered.length) {
        reportList.innerHTML = '<p>No reports available for selected type.</p>';
        return;
      }

      reportList.innerHTML = filtered.map(report => `
        <div class="activity-item">
          <div class="activity-icon"><i class="fas fa-file-medical"></i></div>
          <div class="activity-content">
            <div class="activity-title">${report.reportType}</div>
            <div class="activity-time">${new Date(report.uploadedAt).toLocaleString()}</div>
          </div>
          <div class="activity-action">
            <a href="/${report.filePath}" target="_blank" class="view-btn"><i class="fas fa-eye"></i> View</a>
            <a href="/${report.filePath}" download class="download-btn"><i class="fas fa-download"></i> Download</a>
            <button onclick="deleteReport('${report._id}')" class="delete-btn"><i class="fas fa-trash-alt"></i> Delete</button>
          </div>
        </div>
      `).join('');
    }

    async function deleteReport(reportId) {
      if (!confirm('Are you sure you want to delete this report?')) return;

      try {
        const res = await fetch(`/delete-report/${reportId}`, { method: 'DELETE' });
        if (res.ok) {
          alert('✅ Report deleted successfully!');
          loadDashboardData();
        } else {
          alert('❌ Failed to delete report');
        }
      } catch (err) {
        console.error('Error deleting report:', err);
        alert('❌ An error occurred while deleting');
      }
    }

    function logout() {
      fetch('/logout', { method: 'POST' })
        .then(() => window.location.href = '/login')
        .catch(err => console.error('Logout failed', err));
    }

    document.getElementById('uploadForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const formData = new FormData(this);

      try {
        const res = await fetch('/upload-report', {
          method: 'POST',
          body: formData
        });

        if (res.ok) {
          alert('✅ Report uploaded successfully!');
          loadDashboardData();
        } else {
          alert('❌ Failed to upload report');
        }
      } catch (err) {
        console.error('Error uploading report:', err);
        alert('❌ An error occurred while uploading');
      }
    });

    showCurrentDate();
    loadDashboardData();
  </script>
</body>
</html>






